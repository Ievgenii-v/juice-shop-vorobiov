import { faker } from '@faker-js/faker';
import user from '../fixtures/user.json';
import homePage from '../support/Pages/HomePage';
import registrationPage from '../support/Pages/RegistrationPage';

beforeEach('Open host page and Close Welcome Banner', () => {
	homePage.visitWithoutWelcomeBanner();
	registrationPage.visit();
});

describe('Registration form verification and User Registration', () => {
	user.email = faker.internet.email({
		firstName: faker.person.firstName(),
		lastName: faker.person.lastName(),
		provider: 'faker.ua',
	});
	user.password = faker.internet.password({ length: 20 });

	it('Open Registration form via Account button', () => {
		cy.log(`Open host page and go via UI elements to the Registration form`);
		homePage.accountButton().contains(' Account ').click();
		cy.get('#navbarLoginButton').contains(' Login ').click();
		cy.url().should(
			'eq',
			'https://juice-shop-sanitarskyi.herokuapp.com/#/login'
		);
		cy.get('#newCustomerLink').contains('Not yet a customer?').click();
		cy.url().should(
			'eq',
			'https://juice-shop-sanitarskyi.herokuapp.com/#/register'
		);
	});
	it('Registration form verification', () => {
		cy.log(
			`Open user with Email: ${user.email}, UserName: ${user.username} and Password: ${user.password}`
		);
		registrationPage.emailField().click();
		registrationPage.passwordField().click();
		registrationPage.passwordField2().click();
		registrationPage.securityQuestionField().click().type('{esc}');
		registrationPage.securityAnswerField().click();
		cy.get('[class="ng-star-inserted"]').click();
		registrationPage.registerButton().should('have.attr', 'disabled');
		registrationPage
			.emailFieldValidation()
			.contains('Please provide an email address.');
		registrationPage
			.passwordFieldValidation()
			.contains('Please provide a password. ');
		registrationPage
			.passwordField2Validation()
			.contains(' Please repeat your password. ');
		registrationPage
			.securityQuestionFieldValidation()
			.contains(' Please select a security question. ');
		registrationPage
			.securityAnswerFieldValidation()
			.contains(' Please provide an answer to your security question. ');
	});
	it('Registration autogenerated user', () => {
		cy.log(
			`User Registration with Email: ${user.email} and Password: ${user.password}`
		);
		registrationPage.emailField().type(user.email);
		registrationPage.passwordField().type(user.password);
		registrationPage.passwordField2().type(user.password);
		registrationPage.securityQuestionField().click();
		cy.get('#mat-option-9').click();
		registrationPage.securityAnswerField().type(user.petName);
		registrationPage.registerButton().should('not.have.attr', 'disabled');
		registrationPage.registerButton().click();
		registrationPage
			.successRegistrationPopup()
			.should(
				'have.text',
				'Registration completed successfully. You can now log in.'
			);
	});
});
